syntax = "proto2";

package dexhand;

/* ServoStatus
 * ServoStatus is a message that contains the full status of a servo
 * 
 * uint32 servoId: The id of the servo
 * uint32 status: The status of the servo
 * uint32 voltage: The voltage of the servo
 * uint32 temperature: The temperature of the servo
 * uint32 position: The position of the servo
 * sint32 speed: The speed of the servo
 * sint32 load: The load of the servo
 */
message ServoStatus
{
    optional uint32 servoId = 1;
    optional uint32 status = 2;
    optional uint32 voltage = 3;
    optional uint32 temperature = 4;
    optional uint32 position = 5;
    optional sint32 speed = 6;
    optional sint32 load = 7;   
}

/* ServoStatusList
 * ServoStatusList is a message that contains a list of ServoStatus messages
 * 
 * repeated ServoStatus servoStatus: A list of ServoStatus messages
 */
message ServoStatusList
{
    repeated ServoStatus servos = 1;
}


/* ServoVars
 * ServoVars is a message that contains the variables of a servo
 * 
 * uint32 servoId: The id of the servo
 * uint32 status: The status of the servo
 * uint32 hwMinPosition: The hardware minimum position of the servo
 * uint32 hwMaxPosition: The hardware maximum position of the servo
 * uint32 swMinPosition: The software minimum position of the servo
 * uint32 swMaxPosition: The software maximum position of the servo
 * uint32 homePosition: The home position of the servo
 * uint32 maxLoad: The maximum load of the servo
 * uint32 maxTemperature: The maximum temperature of the servo
 * string name: The name of the servo
 */
message ServoVars
{
    optional uint32 servoId = 1;
    optional uint32 hwMinPosition = 2;
    optional uint32 hwMaxPosition = 3;
    optional uint32 swMinPosition = 4;
    optional uint32 swMaxPosition = 5;
    optional uint32 homePosition = 6;
    optional uint32 maxLoadPct = 7;
    optional uint32 maxTemperature = 8;
    optional bool torqueEnable = 9;
}

/* ServoVarsList
 * ServoVarsList is a message that contains a list of ServoVars messages
 * 
 * repeated ServoVars servos: A list of ServoVars messages
 */
message ServoVarsList
{
    repeated ServoVars servos = 1;
}


/* ServoTuning
 * ServoTuning is a message that contains the tuning of a servo
 * 
 * uint32 servoId: The id of the servo
 * uint32 minPosition: The minimum position of the servo
 * uint32 maxPosition: The maximum position of the servo
 * uint32 homePosition: The home position of the servo
 * uint32 odometer: Approximate odometer of the servo (in encoder ticks)
 * uint32 faults: Approximate count of faults on the servo
 */
message ServoTuning
{
    optional uint32 servoId = 1;
    optional uint32 minPosition = 2;
    optional uint32 maxPosition = 3;
    optional uint32 homePosition = 4;
    optional uint32 odometer = 5;
    optional uint32 faults = 6;
}


/* FiwrmwareSaveFile
 *
 * Data structure to save firmware configuration and servo analytics
 * 
 * repeated ServoTuning servoTuning: A list of ServoTuning objects for each servo
 */
message FirmwareSaveFile
{
    repeated ServoTuning servoTuning = 1;
}


/* FirmwareVersion
 * FirmwareVersion is a message that contains the version of the firmware
 * 
 * string name: The name of the firmware
 * uint32 major: The major version of the firmware
 * uint32 minor: The minor version of the firmware
 */
message FirmwareVersion
{
    optional string name = 1;
    optional uint32 major = 2;
    optional uint32 minor = 3;
}



/* ServoRegister
 * ServoRegister is a message that contains the register value from a servo
 * uint32 servoId: The id of the servo
 * uint32 address: The address of the register
 * uint32 value: The value of the register
 * uint32 size: The size of the register (1 = byte, 2 = word)
 */
message ServoRegister
{
    optional uint32 servoId = 1;
    optional uint32 address = 2;
    optional uint32 value = 3;
    optional uint32 size = 4;
}

/* HandParams
* HandParams is a message that contains global parameters or settings for the hand
* 
* bool autoThumbExtensor: Whether the thumb extensor should be automatically controlled by the firmware
*/
message HandParams
{
    optional bool autoThumbExtensor = 1;
}

