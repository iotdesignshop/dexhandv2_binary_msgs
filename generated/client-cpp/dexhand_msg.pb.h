// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dexhand_msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dexhand_5fmsg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dexhand_5fmsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dexhand_5fmsg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dexhand_5fmsg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dexhand_5fmsg_2eproto;
namespace dexhand {
class ServoStatus;
class ServoStatusDefaultTypeInternal;
extern ServoStatusDefaultTypeInternal _ServoStatus_default_instance_;
}  // namespace dexhand
PROTOBUF_NAMESPACE_OPEN
template<> ::dexhand::ServoStatus* Arena::CreateMaybeMessage<::dexhand::ServoStatus>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace dexhand {

// ===================================================================

class ServoStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dexhand.ServoStatus) */ {
 public:
  inline ServoStatus() : ServoStatus(nullptr) {};
  virtual ~ServoStatus();

  ServoStatus(const ServoStatus& from);
  ServoStatus(ServoStatus&& from) noexcept
    : ServoStatus() {
    *this = ::std::move(from);
  }

  inline ServoStatus& operator=(const ServoStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServoStatus& operator=(ServoStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServoStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServoStatus* internal_default_instance() {
    return reinterpret_cast<const ServoStatus*>(
               &_ServoStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ServoStatus& a, ServoStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ServoStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServoStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServoStatus* New() const final {
    return CreateMaybeMessage<ServoStatus>(nullptr);
  }

  ServoStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServoStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServoStatus& from);
  void MergeFrom(const ServoStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServoStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dexhand.ServoStatus";
  }
  protected:
  explicit ServoStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dexhand_5fmsg_2eproto);
    return ::descriptor_table_dexhand_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServoIdFieldNumber = 1,
    kStatusFieldNumber = 2,
    kVoltageFieldNumber = 3,
    kTemperatureFieldNumber = 4,
    kPositionFieldNumber = 5,
    kSpeedFieldNumber = 6,
    kLoadFieldNumber = 7,
  };
  // optional uint32 servoId = 1;
  bool has_servoid() const;
  private:
  bool _internal_has_servoid() const;
  public:
  void clear_servoid();
  ::PROTOBUF_NAMESPACE_ID::uint32 servoid() const;
  void set_servoid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_servoid() const;
  void _internal_set_servoid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 voltage = 3;
  bool has_voltage() const;
  private:
  bool _internal_has_voltage() const;
  public:
  void clear_voltage();
  ::PROTOBUF_NAMESPACE_ID::uint32 voltage() const;
  void set_voltage(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_voltage() const;
  void _internal_set_voltage(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 temperature = 4;
  bool has_temperature() const;
  private:
  bool _internal_has_temperature() const;
  public:
  void clear_temperature();
  ::PROTOBUF_NAMESPACE_ID::uint32 temperature() const;
  void set_temperature(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_temperature() const;
  void _internal_set_temperature(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 position = 5;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  ::PROTOBUF_NAMESPACE_ID::uint32 position() const;
  void set_position(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_position() const;
  void _internal_set_position(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional sint32 speed = 6;
  bool has_speed() const;
  private:
  bool _internal_has_speed() const;
  public:
  void clear_speed();
  ::PROTOBUF_NAMESPACE_ID::int32 speed() const;
  void set_speed(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_speed() const;
  void _internal_set_speed(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional sint32 load = 7;
  bool has_load() const;
  private:
  bool _internal_has_load() const;
  public:
  void clear_load();
  ::PROTOBUF_NAMESPACE_ID::int32 load() const;
  void set_load(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_load() const;
  void _internal_set_load(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:dexhand.ServoStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 servoid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 voltage_;
  ::PROTOBUF_NAMESPACE_ID::uint32 temperature_;
  ::PROTOBUF_NAMESPACE_ID::uint32 position_;
  ::PROTOBUF_NAMESPACE_ID::int32 speed_;
  ::PROTOBUF_NAMESPACE_ID::int32 load_;
  friend struct ::TableStruct_dexhand_5fmsg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServoStatus

// optional uint32 servoId = 1;
inline bool ServoStatus::_internal_has_servoid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ServoStatus::has_servoid() const {
  return _internal_has_servoid();
}
inline void ServoStatus::clear_servoid() {
  servoid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoStatus::_internal_servoid() const {
  return servoid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoStatus::servoid() const {
  // @@protoc_insertion_point(field_get:dexhand.ServoStatus.servoId)
  return _internal_servoid();
}
inline void ServoStatus::_internal_set_servoid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  servoid_ = value;
}
inline void ServoStatus::set_servoid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_servoid(value);
  // @@protoc_insertion_point(field_set:dexhand.ServoStatus.servoId)
}

// optional uint32 status = 2;
inline bool ServoStatus::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ServoStatus::has_status() const {
  return _internal_has_status();
}
inline void ServoStatus::clear_status() {
  status_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoStatus::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoStatus::status() const {
  // @@protoc_insertion_point(field_get:dexhand.ServoStatus.status)
  return _internal_status();
}
inline void ServoStatus::_internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  status_ = value;
}
inline void ServoStatus::set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:dexhand.ServoStatus.status)
}

// optional uint32 voltage = 3;
inline bool ServoStatus::_internal_has_voltage() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ServoStatus::has_voltage() const {
  return _internal_has_voltage();
}
inline void ServoStatus::clear_voltage() {
  voltage_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoStatus::_internal_voltage() const {
  return voltage_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoStatus::voltage() const {
  // @@protoc_insertion_point(field_get:dexhand.ServoStatus.voltage)
  return _internal_voltage();
}
inline void ServoStatus::_internal_set_voltage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  voltage_ = value;
}
inline void ServoStatus::set_voltage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_voltage(value);
  // @@protoc_insertion_point(field_set:dexhand.ServoStatus.voltage)
}

// optional uint32 temperature = 4;
inline bool ServoStatus::_internal_has_temperature() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ServoStatus::has_temperature() const {
  return _internal_has_temperature();
}
inline void ServoStatus::clear_temperature() {
  temperature_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoStatus::_internal_temperature() const {
  return temperature_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoStatus::temperature() const {
  // @@protoc_insertion_point(field_get:dexhand.ServoStatus.temperature)
  return _internal_temperature();
}
inline void ServoStatus::_internal_set_temperature(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  temperature_ = value;
}
inline void ServoStatus::set_temperature(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_temperature(value);
  // @@protoc_insertion_point(field_set:dexhand.ServoStatus.temperature)
}

// optional uint32 position = 5;
inline bool ServoStatus::_internal_has_position() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ServoStatus::has_position() const {
  return _internal_has_position();
}
inline void ServoStatus::clear_position() {
  position_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoStatus::_internal_position() const {
  return position_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoStatus::position() const {
  // @@protoc_insertion_point(field_get:dexhand.ServoStatus.position)
  return _internal_position();
}
inline void ServoStatus::_internal_set_position(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  position_ = value;
}
inline void ServoStatus::set_position(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:dexhand.ServoStatus.position)
}

// optional sint32 speed = 6;
inline bool ServoStatus::_internal_has_speed() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ServoStatus::has_speed() const {
  return _internal_has_speed();
}
inline void ServoStatus::clear_speed() {
  speed_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServoStatus::_internal_speed() const {
  return speed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServoStatus::speed() const {
  // @@protoc_insertion_point(field_get:dexhand.ServoStatus.speed)
  return _internal_speed();
}
inline void ServoStatus::_internal_set_speed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  speed_ = value;
}
inline void ServoStatus::set_speed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:dexhand.ServoStatus.speed)
}

// optional sint32 load = 7;
inline bool ServoStatus::_internal_has_load() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ServoStatus::has_load() const {
  return _internal_has_load();
}
inline void ServoStatus::clear_load() {
  load_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServoStatus::_internal_load() const {
  return load_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServoStatus::load() const {
  // @@protoc_insertion_point(field_get:dexhand.ServoStatus.load)
  return _internal_load();
}
inline void ServoStatus::_internal_set_load(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  load_ = value;
}
inline void ServoStatus::set_load(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_load(value);
  // @@protoc_insertion_point(field_set:dexhand.ServoStatus.load)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace dexhand

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dexhand_5fmsg_2eproto
