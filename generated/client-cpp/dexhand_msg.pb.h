// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dexhand_msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dexhand_5fmsg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dexhand_5fmsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dexhand_5fmsg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dexhand_5fmsg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dexhand_5fmsg_2eproto;
namespace dexhand {
class FirmwareSaveFile;
class FirmwareSaveFileDefaultTypeInternal;
extern FirmwareSaveFileDefaultTypeInternal _FirmwareSaveFile_default_instance_;
class FirmwareVersion;
class FirmwareVersionDefaultTypeInternal;
extern FirmwareVersionDefaultTypeInternal _FirmwareVersion_default_instance_;
class HandParams;
class HandParamsDefaultTypeInternal;
extern HandParamsDefaultTypeInternal _HandParams_default_instance_;
class ServoRegister;
class ServoRegisterDefaultTypeInternal;
extern ServoRegisterDefaultTypeInternal _ServoRegister_default_instance_;
class ServoStatus;
class ServoStatusDefaultTypeInternal;
extern ServoStatusDefaultTypeInternal _ServoStatus_default_instance_;
class ServoStatusList;
class ServoStatusListDefaultTypeInternal;
extern ServoStatusListDefaultTypeInternal _ServoStatusList_default_instance_;
class ServoTuning;
class ServoTuningDefaultTypeInternal;
extern ServoTuningDefaultTypeInternal _ServoTuning_default_instance_;
class ServoVars;
class ServoVarsDefaultTypeInternal;
extern ServoVarsDefaultTypeInternal _ServoVars_default_instance_;
class ServoVarsList;
class ServoVarsListDefaultTypeInternal;
extern ServoVarsListDefaultTypeInternal _ServoVarsList_default_instance_;
}  // namespace dexhand
PROTOBUF_NAMESPACE_OPEN
template<> ::dexhand::FirmwareSaveFile* Arena::CreateMaybeMessage<::dexhand::FirmwareSaveFile>(Arena*);
template<> ::dexhand::FirmwareVersion* Arena::CreateMaybeMessage<::dexhand::FirmwareVersion>(Arena*);
template<> ::dexhand::HandParams* Arena::CreateMaybeMessage<::dexhand::HandParams>(Arena*);
template<> ::dexhand::ServoRegister* Arena::CreateMaybeMessage<::dexhand::ServoRegister>(Arena*);
template<> ::dexhand::ServoStatus* Arena::CreateMaybeMessage<::dexhand::ServoStatus>(Arena*);
template<> ::dexhand::ServoStatusList* Arena::CreateMaybeMessage<::dexhand::ServoStatusList>(Arena*);
template<> ::dexhand::ServoTuning* Arena::CreateMaybeMessage<::dexhand::ServoTuning>(Arena*);
template<> ::dexhand::ServoVars* Arena::CreateMaybeMessage<::dexhand::ServoVars>(Arena*);
template<> ::dexhand::ServoVarsList* Arena::CreateMaybeMessage<::dexhand::ServoVarsList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace dexhand {

// ===================================================================

class ServoStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dexhand.ServoStatus) */ {
 public:
  inline ServoStatus() : ServoStatus(nullptr) {};
  virtual ~ServoStatus();

  ServoStatus(const ServoStatus& from);
  ServoStatus(ServoStatus&& from) noexcept
    : ServoStatus() {
    *this = ::std::move(from);
  }

  inline ServoStatus& operator=(const ServoStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServoStatus& operator=(ServoStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServoStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServoStatus* internal_default_instance() {
    return reinterpret_cast<const ServoStatus*>(
               &_ServoStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ServoStatus& a, ServoStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ServoStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServoStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServoStatus* New() const final {
    return CreateMaybeMessage<ServoStatus>(nullptr);
  }

  ServoStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServoStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServoStatus& from);
  void MergeFrom(const ServoStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServoStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dexhand.ServoStatus";
  }
  protected:
  explicit ServoStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dexhand_5fmsg_2eproto);
    return ::descriptor_table_dexhand_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServoIdFieldNumber = 1,
    kStatusFieldNumber = 2,
    kVoltageFieldNumber = 3,
    kTemperatureFieldNumber = 4,
    kPositionFieldNumber = 5,
    kSpeedFieldNumber = 6,
    kLoadFieldNumber = 7,
  };
  // optional uint32 servoId = 1;
  bool has_servoid() const;
  private:
  bool _internal_has_servoid() const;
  public:
  void clear_servoid();
  ::PROTOBUF_NAMESPACE_ID::uint32 servoid() const;
  void set_servoid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_servoid() const;
  void _internal_set_servoid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 voltage = 3;
  bool has_voltage() const;
  private:
  bool _internal_has_voltage() const;
  public:
  void clear_voltage();
  ::PROTOBUF_NAMESPACE_ID::uint32 voltage() const;
  void set_voltage(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_voltage() const;
  void _internal_set_voltage(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 temperature = 4;
  bool has_temperature() const;
  private:
  bool _internal_has_temperature() const;
  public:
  void clear_temperature();
  ::PROTOBUF_NAMESPACE_ID::uint32 temperature() const;
  void set_temperature(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_temperature() const;
  void _internal_set_temperature(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 position = 5;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  ::PROTOBUF_NAMESPACE_ID::uint32 position() const;
  void set_position(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_position() const;
  void _internal_set_position(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional sint32 speed = 6;
  bool has_speed() const;
  private:
  bool _internal_has_speed() const;
  public:
  void clear_speed();
  ::PROTOBUF_NAMESPACE_ID::int32 speed() const;
  void set_speed(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_speed() const;
  void _internal_set_speed(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional sint32 load = 7;
  bool has_load() const;
  private:
  bool _internal_has_load() const;
  public:
  void clear_load();
  ::PROTOBUF_NAMESPACE_ID::int32 load() const;
  void set_load(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_load() const;
  void _internal_set_load(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:dexhand.ServoStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 servoid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 voltage_;
  ::PROTOBUF_NAMESPACE_ID::uint32 temperature_;
  ::PROTOBUF_NAMESPACE_ID::uint32 position_;
  ::PROTOBUF_NAMESPACE_ID::int32 speed_;
  ::PROTOBUF_NAMESPACE_ID::int32 load_;
  friend struct ::TableStruct_dexhand_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class ServoStatusList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dexhand.ServoStatusList) */ {
 public:
  inline ServoStatusList() : ServoStatusList(nullptr) {};
  virtual ~ServoStatusList();

  ServoStatusList(const ServoStatusList& from);
  ServoStatusList(ServoStatusList&& from) noexcept
    : ServoStatusList() {
    *this = ::std::move(from);
  }

  inline ServoStatusList& operator=(const ServoStatusList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServoStatusList& operator=(ServoStatusList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServoStatusList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServoStatusList* internal_default_instance() {
    return reinterpret_cast<const ServoStatusList*>(
               &_ServoStatusList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ServoStatusList& a, ServoStatusList& b) {
    a.Swap(&b);
  }
  inline void Swap(ServoStatusList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServoStatusList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServoStatusList* New() const final {
    return CreateMaybeMessage<ServoStatusList>(nullptr);
  }

  ServoStatusList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServoStatusList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServoStatusList& from);
  void MergeFrom(const ServoStatusList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServoStatusList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dexhand.ServoStatusList";
  }
  protected:
  explicit ServoStatusList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dexhand_5fmsg_2eproto);
    return ::descriptor_table_dexhand_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServosFieldNumber = 1,
  };
  // repeated .dexhand.ServoStatus servos = 1;
  int servos_size() const;
  private:
  int _internal_servos_size() const;
  public:
  void clear_servos();
  ::dexhand::ServoStatus* mutable_servos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dexhand::ServoStatus >*
      mutable_servos();
  private:
  const ::dexhand::ServoStatus& _internal_servos(int index) const;
  ::dexhand::ServoStatus* _internal_add_servos();
  public:
  const ::dexhand::ServoStatus& servos(int index) const;
  ::dexhand::ServoStatus* add_servos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dexhand::ServoStatus >&
      servos() const;

  // @@protoc_insertion_point(class_scope:dexhand.ServoStatusList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dexhand::ServoStatus > servos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dexhand_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class ServoVars PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dexhand.ServoVars) */ {
 public:
  inline ServoVars() : ServoVars(nullptr) {};
  virtual ~ServoVars();

  ServoVars(const ServoVars& from);
  ServoVars(ServoVars&& from) noexcept
    : ServoVars() {
    *this = ::std::move(from);
  }

  inline ServoVars& operator=(const ServoVars& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServoVars& operator=(ServoVars&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServoVars& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServoVars* internal_default_instance() {
    return reinterpret_cast<const ServoVars*>(
               &_ServoVars_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ServoVars& a, ServoVars& b) {
    a.Swap(&b);
  }
  inline void Swap(ServoVars* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServoVars* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServoVars* New() const final {
    return CreateMaybeMessage<ServoVars>(nullptr);
  }

  ServoVars* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServoVars>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServoVars& from);
  void MergeFrom(const ServoVars& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServoVars* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dexhand.ServoVars";
  }
  protected:
  explicit ServoVars(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dexhand_5fmsg_2eproto);
    return ::descriptor_table_dexhand_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServoIdFieldNumber = 1,
    kHwMinPositionFieldNumber = 2,
    kHwMaxPositionFieldNumber = 3,
    kSwMinPositionFieldNumber = 4,
    kSwMaxPositionFieldNumber = 5,
    kHomePositionFieldNumber = 6,
    kMaxLoadPctFieldNumber = 7,
    kMaxTemperatureFieldNumber = 8,
    kTorqueEnableFieldNumber = 9,
  };
  // optional uint32 servoId = 1;
  bool has_servoid() const;
  private:
  bool _internal_has_servoid() const;
  public:
  void clear_servoid();
  ::PROTOBUF_NAMESPACE_ID::uint32 servoid() const;
  void set_servoid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_servoid() const;
  void _internal_set_servoid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 hwMinPosition = 2;
  bool has_hwminposition() const;
  private:
  bool _internal_has_hwminposition() const;
  public:
  void clear_hwminposition();
  ::PROTOBUF_NAMESPACE_ID::uint32 hwminposition() const;
  void set_hwminposition(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hwminposition() const;
  void _internal_set_hwminposition(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 hwMaxPosition = 3;
  bool has_hwmaxposition() const;
  private:
  bool _internal_has_hwmaxposition() const;
  public:
  void clear_hwmaxposition();
  ::PROTOBUF_NAMESPACE_ID::uint32 hwmaxposition() const;
  void set_hwmaxposition(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hwmaxposition() const;
  void _internal_set_hwmaxposition(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 swMinPosition = 4;
  bool has_swminposition() const;
  private:
  bool _internal_has_swminposition() const;
  public:
  void clear_swminposition();
  ::PROTOBUF_NAMESPACE_ID::uint32 swminposition() const;
  void set_swminposition(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_swminposition() const;
  void _internal_set_swminposition(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 swMaxPosition = 5;
  bool has_swmaxposition() const;
  private:
  bool _internal_has_swmaxposition() const;
  public:
  void clear_swmaxposition();
  ::PROTOBUF_NAMESPACE_ID::uint32 swmaxposition() const;
  void set_swmaxposition(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_swmaxposition() const;
  void _internal_set_swmaxposition(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 homePosition = 6;
  bool has_homeposition() const;
  private:
  bool _internal_has_homeposition() const;
  public:
  void clear_homeposition();
  ::PROTOBUF_NAMESPACE_ID::uint32 homeposition() const;
  void set_homeposition(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_homeposition() const;
  void _internal_set_homeposition(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 maxLoadPct = 7;
  bool has_maxloadpct() const;
  private:
  bool _internal_has_maxloadpct() const;
  public:
  void clear_maxloadpct();
  ::PROTOBUF_NAMESPACE_ID::uint32 maxloadpct() const;
  void set_maxloadpct(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maxloadpct() const;
  void _internal_set_maxloadpct(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 maxTemperature = 8;
  bool has_maxtemperature() const;
  private:
  bool _internal_has_maxtemperature() const;
  public:
  void clear_maxtemperature();
  ::PROTOBUF_NAMESPACE_ID::uint32 maxtemperature() const;
  void set_maxtemperature(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maxtemperature() const;
  void _internal_set_maxtemperature(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool torqueEnable = 9;
  bool has_torqueenable() const;
  private:
  bool _internal_has_torqueenable() const;
  public:
  void clear_torqueenable();
  bool torqueenable() const;
  void set_torqueenable(bool value);
  private:
  bool _internal_torqueenable() const;
  void _internal_set_torqueenable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:dexhand.ServoVars)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 servoid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hwminposition_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hwmaxposition_;
  ::PROTOBUF_NAMESPACE_ID::uint32 swminposition_;
  ::PROTOBUF_NAMESPACE_ID::uint32 swmaxposition_;
  ::PROTOBUF_NAMESPACE_ID::uint32 homeposition_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maxloadpct_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maxtemperature_;
  bool torqueenable_;
  friend struct ::TableStruct_dexhand_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class ServoVarsList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dexhand.ServoVarsList) */ {
 public:
  inline ServoVarsList() : ServoVarsList(nullptr) {};
  virtual ~ServoVarsList();

  ServoVarsList(const ServoVarsList& from);
  ServoVarsList(ServoVarsList&& from) noexcept
    : ServoVarsList() {
    *this = ::std::move(from);
  }

  inline ServoVarsList& operator=(const ServoVarsList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServoVarsList& operator=(ServoVarsList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServoVarsList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServoVarsList* internal_default_instance() {
    return reinterpret_cast<const ServoVarsList*>(
               &_ServoVarsList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ServoVarsList& a, ServoVarsList& b) {
    a.Swap(&b);
  }
  inline void Swap(ServoVarsList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServoVarsList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServoVarsList* New() const final {
    return CreateMaybeMessage<ServoVarsList>(nullptr);
  }

  ServoVarsList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServoVarsList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServoVarsList& from);
  void MergeFrom(const ServoVarsList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServoVarsList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dexhand.ServoVarsList";
  }
  protected:
  explicit ServoVarsList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dexhand_5fmsg_2eproto);
    return ::descriptor_table_dexhand_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServosFieldNumber = 1,
  };
  // repeated .dexhand.ServoVars servos = 1;
  int servos_size() const;
  private:
  int _internal_servos_size() const;
  public:
  void clear_servos();
  ::dexhand::ServoVars* mutable_servos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dexhand::ServoVars >*
      mutable_servos();
  private:
  const ::dexhand::ServoVars& _internal_servos(int index) const;
  ::dexhand::ServoVars* _internal_add_servos();
  public:
  const ::dexhand::ServoVars& servos(int index) const;
  ::dexhand::ServoVars* add_servos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dexhand::ServoVars >&
      servos() const;

  // @@protoc_insertion_point(class_scope:dexhand.ServoVarsList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dexhand::ServoVars > servos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dexhand_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class ServoTuning PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dexhand.ServoTuning) */ {
 public:
  inline ServoTuning() : ServoTuning(nullptr) {};
  virtual ~ServoTuning();

  ServoTuning(const ServoTuning& from);
  ServoTuning(ServoTuning&& from) noexcept
    : ServoTuning() {
    *this = ::std::move(from);
  }

  inline ServoTuning& operator=(const ServoTuning& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServoTuning& operator=(ServoTuning&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServoTuning& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServoTuning* internal_default_instance() {
    return reinterpret_cast<const ServoTuning*>(
               &_ServoTuning_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ServoTuning& a, ServoTuning& b) {
    a.Swap(&b);
  }
  inline void Swap(ServoTuning* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServoTuning* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServoTuning* New() const final {
    return CreateMaybeMessage<ServoTuning>(nullptr);
  }

  ServoTuning* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServoTuning>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServoTuning& from);
  void MergeFrom(const ServoTuning& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServoTuning* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dexhand.ServoTuning";
  }
  protected:
  explicit ServoTuning(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dexhand_5fmsg_2eproto);
    return ::descriptor_table_dexhand_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServoIdFieldNumber = 1,
    kMinPositionFieldNumber = 2,
    kMaxPositionFieldNumber = 3,
    kHomePositionFieldNumber = 4,
    kOdometerFieldNumber = 5,
    kFaultsFieldNumber = 6,
  };
  // optional uint32 servoId = 1;
  bool has_servoid() const;
  private:
  bool _internal_has_servoid() const;
  public:
  void clear_servoid();
  ::PROTOBUF_NAMESPACE_ID::uint32 servoid() const;
  void set_servoid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_servoid() const;
  void _internal_set_servoid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 minPosition = 2;
  bool has_minposition() const;
  private:
  bool _internal_has_minposition() const;
  public:
  void clear_minposition();
  ::PROTOBUF_NAMESPACE_ID::uint32 minposition() const;
  void set_minposition(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_minposition() const;
  void _internal_set_minposition(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 maxPosition = 3;
  bool has_maxposition() const;
  private:
  bool _internal_has_maxposition() const;
  public:
  void clear_maxposition();
  ::PROTOBUF_NAMESPACE_ID::uint32 maxposition() const;
  void set_maxposition(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maxposition() const;
  void _internal_set_maxposition(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 homePosition = 4;
  bool has_homeposition() const;
  private:
  bool _internal_has_homeposition() const;
  public:
  void clear_homeposition();
  ::PROTOBUF_NAMESPACE_ID::uint32 homeposition() const;
  void set_homeposition(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_homeposition() const;
  void _internal_set_homeposition(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 odometer = 5;
  bool has_odometer() const;
  private:
  bool _internal_has_odometer() const;
  public:
  void clear_odometer();
  ::PROTOBUF_NAMESPACE_ID::uint32 odometer() const;
  void set_odometer(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_odometer() const;
  void _internal_set_odometer(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 faults = 6;
  bool has_faults() const;
  private:
  bool _internal_has_faults() const;
  public:
  void clear_faults();
  ::PROTOBUF_NAMESPACE_ID::uint32 faults() const;
  void set_faults(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_faults() const;
  void _internal_set_faults(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:dexhand.ServoTuning)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 servoid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 minposition_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maxposition_;
  ::PROTOBUF_NAMESPACE_ID::uint32 homeposition_;
  ::PROTOBUF_NAMESPACE_ID::uint32 odometer_;
  ::PROTOBUF_NAMESPACE_ID::uint32 faults_;
  friend struct ::TableStruct_dexhand_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class FirmwareSaveFile PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dexhand.FirmwareSaveFile) */ {
 public:
  inline FirmwareSaveFile() : FirmwareSaveFile(nullptr) {};
  virtual ~FirmwareSaveFile();

  FirmwareSaveFile(const FirmwareSaveFile& from);
  FirmwareSaveFile(FirmwareSaveFile&& from) noexcept
    : FirmwareSaveFile() {
    *this = ::std::move(from);
  }

  inline FirmwareSaveFile& operator=(const FirmwareSaveFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline FirmwareSaveFile& operator=(FirmwareSaveFile&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FirmwareSaveFile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirmwareSaveFile* internal_default_instance() {
    return reinterpret_cast<const FirmwareSaveFile*>(
               &_FirmwareSaveFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FirmwareSaveFile& a, FirmwareSaveFile& b) {
    a.Swap(&b);
  }
  inline void Swap(FirmwareSaveFile* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FirmwareSaveFile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FirmwareSaveFile* New() const final {
    return CreateMaybeMessage<FirmwareSaveFile>(nullptr);
  }

  FirmwareSaveFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FirmwareSaveFile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FirmwareSaveFile& from);
  void MergeFrom(const FirmwareSaveFile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirmwareSaveFile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dexhand.FirmwareSaveFile";
  }
  protected:
  explicit FirmwareSaveFile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dexhand_5fmsg_2eproto);
    return ::descriptor_table_dexhand_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServoTuningFieldNumber = 1,
  };
  // repeated .dexhand.ServoTuning servoTuning = 1;
  int servotuning_size() const;
  private:
  int _internal_servotuning_size() const;
  public:
  void clear_servotuning();
  ::dexhand::ServoTuning* mutable_servotuning(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dexhand::ServoTuning >*
      mutable_servotuning();
  private:
  const ::dexhand::ServoTuning& _internal_servotuning(int index) const;
  ::dexhand::ServoTuning* _internal_add_servotuning();
  public:
  const ::dexhand::ServoTuning& servotuning(int index) const;
  ::dexhand::ServoTuning* add_servotuning();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dexhand::ServoTuning >&
      servotuning() const;

  // @@protoc_insertion_point(class_scope:dexhand.FirmwareSaveFile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dexhand::ServoTuning > servotuning_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dexhand_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class FirmwareVersion PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dexhand.FirmwareVersion) */ {
 public:
  inline FirmwareVersion() : FirmwareVersion(nullptr) {};
  virtual ~FirmwareVersion();

  FirmwareVersion(const FirmwareVersion& from);
  FirmwareVersion(FirmwareVersion&& from) noexcept
    : FirmwareVersion() {
    *this = ::std::move(from);
  }

  inline FirmwareVersion& operator=(const FirmwareVersion& from) {
    CopyFrom(from);
    return *this;
  }
  inline FirmwareVersion& operator=(FirmwareVersion&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FirmwareVersion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirmwareVersion* internal_default_instance() {
    return reinterpret_cast<const FirmwareVersion*>(
               &_FirmwareVersion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(FirmwareVersion& a, FirmwareVersion& b) {
    a.Swap(&b);
  }
  inline void Swap(FirmwareVersion* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FirmwareVersion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FirmwareVersion* New() const final {
    return CreateMaybeMessage<FirmwareVersion>(nullptr);
  }

  FirmwareVersion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FirmwareVersion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FirmwareVersion& from);
  void MergeFrom(const FirmwareVersion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirmwareVersion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dexhand.FirmwareVersion";
  }
  protected:
  explicit FirmwareVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dexhand_5fmsg_2eproto);
    return ::descriptor_table_dexhand_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kMajorFieldNumber = 2,
    kMinorFieldNumber = 3,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint32 major = 2;
  bool has_major() const;
  private:
  bool _internal_has_major() const;
  public:
  void clear_major();
  ::PROTOBUF_NAMESPACE_ID::uint32 major() const;
  void set_major(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_major() const;
  void _internal_set_major(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 minor = 3;
  bool has_minor() const;
  private:
  bool _internal_has_minor() const;
  public:
  void clear_minor();
  ::PROTOBUF_NAMESPACE_ID::uint32 minor() const;
  void set_minor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_minor() const;
  void _internal_set_minor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:dexhand.FirmwareVersion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 major_;
  ::PROTOBUF_NAMESPACE_ID::uint32 minor_;
  friend struct ::TableStruct_dexhand_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class ServoRegister PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dexhand.ServoRegister) */ {
 public:
  inline ServoRegister() : ServoRegister(nullptr) {};
  virtual ~ServoRegister();

  ServoRegister(const ServoRegister& from);
  ServoRegister(ServoRegister&& from) noexcept
    : ServoRegister() {
    *this = ::std::move(from);
  }

  inline ServoRegister& operator=(const ServoRegister& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServoRegister& operator=(ServoRegister&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServoRegister& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServoRegister* internal_default_instance() {
    return reinterpret_cast<const ServoRegister*>(
               &_ServoRegister_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ServoRegister& a, ServoRegister& b) {
    a.Swap(&b);
  }
  inline void Swap(ServoRegister* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServoRegister* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServoRegister* New() const final {
    return CreateMaybeMessage<ServoRegister>(nullptr);
  }

  ServoRegister* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServoRegister>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServoRegister& from);
  void MergeFrom(const ServoRegister& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServoRegister* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dexhand.ServoRegister";
  }
  protected:
  explicit ServoRegister(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dexhand_5fmsg_2eproto);
    return ::descriptor_table_dexhand_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServoIdFieldNumber = 1,
    kAddressFieldNumber = 2,
    kValueFieldNumber = 3,
    kSizeFieldNumber = 4,
  };
  // optional uint32 servoId = 1;
  bool has_servoid() const;
  private:
  bool _internal_has_servoid() const;
  public:
  void clear_servoid();
  ::PROTOBUF_NAMESPACE_ID::uint32 servoid() const;
  void set_servoid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_servoid() const;
  void _internal_set_servoid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 address = 2;
  bool has_address() const;
  private:
  bool _internal_has_address() const;
  public:
  void clear_address();
  ::PROTOBUF_NAMESPACE_ID::uint32 address() const;
  void set_address(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_address() const;
  void _internal_set_address(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 value = 3;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 size = 4;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:dexhand.ServoRegister)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 servoid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 address_;
  ::PROTOBUF_NAMESPACE_ID::uint32 value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 size_;
  friend struct ::TableStruct_dexhand_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class HandParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dexhand.HandParams) */ {
 public:
  inline HandParams() : HandParams(nullptr) {};
  virtual ~HandParams();

  HandParams(const HandParams& from);
  HandParams(HandParams&& from) noexcept
    : HandParams() {
    *this = ::std::move(from);
  }

  inline HandParams& operator=(const HandParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline HandParams& operator=(HandParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HandParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HandParams* internal_default_instance() {
    return reinterpret_cast<const HandParams*>(
               &_HandParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(HandParams& a, HandParams& b) {
    a.Swap(&b);
  }
  inline void Swap(HandParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HandParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HandParams* New() const final {
    return CreateMaybeMessage<HandParams>(nullptr);
  }

  HandParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HandParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HandParams& from);
  void MergeFrom(const HandParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HandParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dexhand.HandParams";
  }
  protected:
  explicit HandParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dexhand_5fmsg_2eproto);
    return ::descriptor_table_dexhand_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAutoThumbExtensorFieldNumber = 1,
  };
  // optional bool autoThumbExtensor = 1;
  bool has_autothumbextensor() const;
  private:
  bool _internal_has_autothumbextensor() const;
  public:
  void clear_autothumbextensor();
  bool autothumbextensor() const;
  void set_autothumbextensor(bool value);
  private:
  bool _internal_autothumbextensor() const;
  void _internal_set_autothumbextensor(bool value);
  public:

  // @@protoc_insertion_point(class_scope:dexhand.HandParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool autothumbextensor_;
  friend struct ::TableStruct_dexhand_5fmsg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServoStatus

// optional uint32 servoId = 1;
inline bool ServoStatus::_internal_has_servoid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ServoStatus::has_servoid() const {
  return _internal_has_servoid();
}
inline void ServoStatus::clear_servoid() {
  servoid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoStatus::_internal_servoid() const {
  return servoid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoStatus::servoid() const {
  // @@protoc_insertion_point(field_get:dexhand.ServoStatus.servoId)
  return _internal_servoid();
}
inline void ServoStatus::_internal_set_servoid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  servoid_ = value;
}
inline void ServoStatus::set_servoid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_servoid(value);
  // @@protoc_insertion_point(field_set:dexhand.ServoStatus.servoId)
}

// optional uint32 status = 2;
inline bool ServoStatus::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ServoStatus::has_status() const {
  return _internal_has_status();
}
inline void ServoStatus::clear_status() {
  status_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoStatus::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoStatus::status() const {
  // @@protoc_insertion_point(field_get:dexhand.ServoStatus.status)
  return _internal_status();
}
inline void ServoStatus::_internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  status_ = value;
}
inline void ServoStatus::set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:dexhand.ServoStatus.status)
}

// optional uint32 voltage = 3;
inline bool ServoStatus::_internal_has_voltage() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ServoStatus::has_voltage() const {
  return _internal_has_voltage();
}
inline void ServoStatus::clear_voltage() {
  voltage_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoStatus::_internal_voltage() const {
  return voltage_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoStatus::voltage() const {
  // @@protoc_insertion_point(field_get:dexhand.ServoStatus.voltage)
  return _internal_voltage();
}
inline void ServoStatus::_internal_set_voltage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  voltage_ = value;
}
inline void ServoStatus::set_voltage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_voltage(value);
  // @@protoc_insertion_point(field_set:dexhand.ServoStatus.voltage)
}

// optional uint32 temperature = 4;
inline bool ServoStatus::_internal_has_temperature() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ServoStatus::has_temperature() const {
  return _internal_has_temperature();
}
inline void ServoStatus::clear_temperature() {
  temperature_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoStatus::_internal_temperature() const {
  return temperature_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoStatus::temperature() const {
  // @@protoc_insertion_point(field_get:dexhand.ServoStatus.temperature)
  return _internal_temperature();
}
inline void ServoStatus::_internal_set_temperature(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  temperature_ = value;
}
inline void ServoStatus::set_temperature(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_temperature(value);
  // @@protoc_insertion_point(field_set:dexhand.ServoStatus.temperature)
}

// optional uint32 position = 5;
inline bool ServoStatus::_internal_has_position() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ServoStatus::has_position() const {
  return _internal_has_position();
}
inline void ServoStatus::clear_position() {
  position_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoStatus::_internal_position() const {
  return position_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoStatus::position() const {
  // @@protoc_insertion_point(field_get:dexhand.ServoStatus.position)
  return _internal_position();
}
inline void ServoStatus::_internal_set_position(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  position_ = value;
}
inline void ServoStatus::set_position(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:dexhand.ServoStatus.position)
}

// optional sint32 speed = 6;
inline bool ServoStatus::_internal_has_speed() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ServoStatus::has_speed() const {
  return _internal_has_speed();
}
inline void ServoStatus::clear_speed() {
  speed_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServoStatus::_internal_speed() const {
  return speed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServoStatus::speed() const {
  // @@protoc_insertion_point(field_get:dexhand.ServoStatus.speed)
  return _internal_speed();
}
inline void ServoStatus::_internal_set_speed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  speed_ = value;
}
inline void ServoStatus::set_speed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:dexhand.ServoStatus.speed)
}

// optional sint32 load = 7;
inline bool ServoStatus::_internal_has_load() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ServoStatus::has_load() const {
  return _internal_has_load();
}
inline void ServoStatus::clear_load() {
  load_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServoStatus::_internal_load() const {
  return load_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServoStatus::load() const {
  // @@protoc_insertion_point(field_get:dexhand.ServoStatus.load)
  return _internal_load();
}
inline void ServoStatus::_internal_set_load(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  load_ = value;
}
inline void ServoStatus::set_load(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_load(value);
  // @@protoc_insertion_point(field_set:dexhand.ServoStatus.load)
}

// -------------------------------------------------------------------

// ServoStatusList

// repeated .dexhand.ServoStatus servos = 1;
inline int ServoStatusList::_internal_servos_size() const {
  return servos_.size();
}
inline int ServoStatusList::servos_size() const {
  return _internal_servos_size();
}
inline void ServoStatusList::clear_servos() {
  servos_.Clear();
}
inline ::dexhand::ServoStatus* ServoStatusList::mutable_servos(int index) {
  // @@protoc_insertion_point(field_mutable:dexhand.ServoStatusList.servos)
  return servos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dexhand::ServoStatus >*
ServoStatusList::mutable_servos() {
  // @@protoc_insertion_point(field_mutable_list:dexhand.ServoStatusList.servos)
  return &servos_;
}
inline const ::dexhand::ServoStatus& ServoStatusList::_internal_servos(int index) const {
  return servos_.Get(index);
}
inline const ::dexhand::ServoStatus& ServoStatusList::servos(int index) const {
  // @@protoc_insertion_point(field_get:dexhand.ServoStatusList.servos)
  return _internal_servos(index);
}
inline ::dexhand::ServoStatus* ServoStatusList::_internal_add_servos() {
  return servos_.Add();
}
inline ::dexhand::ServoStatus* ServoStatusList::add_servos() {
  // @@protoc_insertion_point(field_add:dexhand.ServoStatusList.servos)
  return _internal_add_servos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dexhand::ServoStatus >&
ServoStatusList::servos() const {
  // @@protoc_insertion_point(field_list:dexhand.ServoStatusList.servos)
  return servos_;
}

// -------------------------------------------------------------------

// ServoVars

// optional uint32 servoId = 1;
inline bool ServoVars::_internal_has_servoid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ServoVars::has_servoid() const {
  return _internal_has_servoid();
}
inline void ServoVars::clear_servoid() {
  servoid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoVars::_internal_servoid() const {
  return servoid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoVars::servoid() const {
  // @@protoc_insertion_point(field_get:dexhand.ServoVars.servoId)
  return _internal_servoid();
}
inline void ServoVars::_internal_set_servoid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  servoid_ = value;
}
inline void ServoVars::set_servoid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_servoid(value);
  // @@protoc_insertion_point(field_set:dexhand.ServoVars.servoId)
}

// optional uint32 hwMinPosition = 2;
inline bool ServoVars::_internal_has_hwminposition() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ServoVars::has_hwminposition() const {
  return _internal_has_hwminposition();
}
inline void ServoVars::clear_hwminposition() {
  hwminposition_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoVars::_internal_hwminposition() const {
  return hwminposition_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoVars::hwminposition() const {
  // @@protoc_insertion_point(field_get:dexhand.ServoVars.hwMinPosition)
  return _internal_hwminposition();
}
inline void ServoVars::_internal_set_hwminposition(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  hwminposition_ = value;
}
inline void ServoVars::set_hwminposition(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hwminposition(value);
  // @@protoc_insertion_point(field_set:dexhand.ServoVars.hwMinPosition)
}

// optional uint32 hwMaxPosition = 3;
inline bool ServoVars::_internal_has_hwmaxposition() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ServoVars::has_hwmaxposition() const {
  return _internal_has_hwmaxposition();
}
inline void ServoVars::clear_hwmaxposition() {
  hwmaxposition_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoVars::_internal_hwmaxposition() const {
  return hwmaxposition_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoVars::hwmaxposition() const {
  // @@protoc_insertion_point(field_get:dexhand.ServoVars.hwMaxPosition)
  return _internal_hwmaxposition();
}
inline void ServoVars::_internal_set_hwmaxposition(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  hwmaxposition_ = value;
}
inline void ServoVars::set_hwmaxposition(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hwmaxposition(value);
  // @@protoc_insertion_point(field_set:dexhand.ServoVars.hwMaxPosition)
}

// optional uint32 swMinPosition = 4;
inline bool ServoVars::_internal_has_swminposition() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ServoVars::has_swminposition() const {
  return _internal_has_swminposition();
}
inline void ServoVars::clear_swminposition() {
  swminposition_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoVars::_internal_swminposition() const {
  return swminposition_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoVars::swminposition() const {
  // @@protoc_insertion_point(field_get:dexhand.ServoVars.swMinPosition)
  return _internal_swminposition();
}
inline void ServoVars::_internal_set_swminposition(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  swminposition_ = value;
}
inline void ServoVars::set_swminposition(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_swminposition(value);
  // @@protoc_insertion_point(field_set:dexhand.ServoVars.swMinPosition)
}

// optional uint32 swMaxPosition = 5;
inline bool ServoVars::_internal_has_swmaxposition() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ServoVars::has_swmaxposition() const {
  return _internal_has_swmaxposition();
}
inline void ServoVars::clear_swmaxposition() {
  swmaxposition_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoVars::_internal_swmaxposition() const {
  return swmaxposition_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoVars::swmaxposition() const {
  // @@protoc_insertion_point(field_get:dexhand.ServoVars.swMaxPosition)
  return _internal_swmaxposition();
}
inline void ServoVars::_internal_set_swmaxposition(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  swmaxposition_ = value;
}
inline void ServoVars::set_swmaxposition(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_swmaxposition(value);
  // @@protoc_insertion_point(field_set:dexhand.ServoVars.swMaxPosition)
}

// optional uint32 homePosition = 6;
inline bool ServoVars::_internal_has_homeposition() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ServoVars::has_homeposition() const {
  return _internal_has_homeposition();
}
inline void ServoVars::clear_homeposition() {
  homeposition_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoVars::_internal_homeposition() const {
  return homeposition_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoVars::homeposition() const {
  // @@protoc_insertion_point(field_get:dexhand.ServoVars.homePosition)
  return _internal_homeposition();
}
inline void ServoVars::_internal_set_homeposition(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  homeposition_ = value;
}
inline void ServoVars::set_homeposition(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_homeposition(value);
  // @@protoc_insertion_point(field_set:dexhand.ServoVars.homePosition)
}

// optional uint32 maxLoadPct = 7;
inline bool ServoVars::_internal_has_maxloadpct() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ServoVars::has_maxloadpct() const {
  return _internal_has_maxloadpct();
}
inline void ServoVars::clear_maxloadpct() {
  maxloadpct_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoVars::_internal_maxloadpct() const {
  return maxloadpct_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoVars::maxloadpct() const {
  // @@protoc_insertion_point(field_get:dexhand.ServoVars.maxLoadPct)
  return _internal_maxloadpct();
}
inline void ServoVars::_internal_set_maxloadpct(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  maxloadpct_ = value;
}
inline void ServoVars::set_maxloadpct(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maxloadpct(value);
  // @@protoc_insertion_point(field_set:dexhand.ServoVars.maxLoadPct)
}

// optional uint32 maxTemperature = 8;
inline bool ServoVars::_internal_has_maxtemperature() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ServoVars::has_maxtemperature() const {
  return _internal_has_maxtemperature();
}
inline void ServoVars::clear_maxtemperature() {
  maxtemperature_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoVars::_internal_maxtemperature() const {
  return maxtemperature_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoVars::maxtemperature() const {
  // @@protoc_insertion_point(field_get:dexhand.ServoVars.maxTemperature)
  return _internal_maxtemperature();
}
inline void ServoVars::_internal_set_maxtemperature(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  maxtemperature_ = value;
}
inline void ServoVars::set_maxtemperature(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maxtemperature(value);
  // @@protoc_insertion_point(field_set:dexhand.ServoVars.maxTemperature)
}

// optional bool torqueEnable = 9;
inline bool ServoVars::_internal_has_torqueenable() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ServoVars::has_torqueenable() const {
  return _internal_has_torqueenable();
}
inline void ServoVars::clear_torqueenable() {
  torqueenable_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool ServoVars::_internal_torqueenable() const {
  return torqueenable_;
}
inline bool ServoVars::torqueenable() const {
  // @@protoc_insertion_point(field_get:dexhand.ServoVars.torqueEnable)
  return _internal_torqueenable();
}
inline void ServoVars::_internal_set_torqueenable(bool value) {
  _has_bits_[0] |= 0x00000100u;
  torqueenable_ = value;
}
inline void ServoVars::set_torqueenable(bool value) {
  _internal_set_torqueenable(value);
  // @@protoc_insertion_point(field_set:dexhand.ServoVars.torqueEnable)
}

// -------------------------------------------------------------------

// ServoVarsList

// repeated .dexhand.ServoVars servos = 1;
inline int ServoVarsList::_internal_servos_size() const {
  return servos_.size();
}
inline int ServoVarsList::servos_size() const {
  return _internal_servos_size();
}
inline void ServoVarsList::clear_servos() {
  servos_.Clear();
}
inline ::dexhand::ServoVars* ServoVarsList::mutable_servos(int index) {
  // @@protoc_insertion_point(field_mutable:dexhand.ServoVarsList.servos)
  return servos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dexhand::ServoVars >*
ServoVarsList::mutable_servos() {
  // @@protoc_insertion_point(field_mutable_list:dexhand.ServoVarsList.servos)
  return &servos_;
}
inline const ::dexhand::ServoVars& ServoVarsList::_internal_servos(int index) const {
  return servos_.Get(index);
}
inline const ::dexhand::ServoVars& ServoVarsList::servos(int index) const {
  // @@protoc_insertion_point(field_get:dexhand.ServoVarsList.servos)
  return _internal_servos(index);
}
inline ::dexhand::ServoVars* ServoVarsList::_internal_add_servos() {
  return servos_.Add();
}
inline ::dexhand::ServoVars* ServoVarsList::add_servos() {
  // @@protoc_insertion_point(field_add:dexhand.ServoVarsList.servos)
  return _internal_add_servos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dexhand::ServoVars >&
ServoVarsList::servos() const {
  // @@protoc_insertion_point(field_list:dexhand.ServoVarsList.servos)
  return servos_;
}

// -------------------------------------------------------------------

// ServoTuning

// optional uint32 servoId = 1;
inline bool ServoTuning::_internal_has_servoid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ServoTuning::has_servoid() const {
  return _internal_has_servoid();
}
inline void ServoTuning::clear_servoid() {
  servoid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoTuning::_internal_servoid() const {
  return servoid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoTuning::servoid() const {
  // @@protoc_insertion_point(field_get:dexhand.ServoTuning.servoId)
  return _internal_servoid();
}
inline void ServoTuning::_internal_set_servoid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  servoid_ = value;
}
inline void ServoTuning::set_servoid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_servoid(value);
  // @@protoc_insertion_point(field_set:dexhand.ServoTuning.servoId)
}

// optional uint32 minPosition = 2;
inline bool ServoTuning::_internal_has_minposition() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ServoTuning::has_minposition() const {
  return _internal_has_minposition();
}
inline void ServoTuning::clear_minposition() {
  minposition_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoTuning::_internal_minposition() const {
  return minposition_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoTuning::minposition() const {
  // @@protoc_insertion_point(field_get:dexhand.ServoTuning.minPosition)
  return _internal_minposition();
}
inline void ServoTuning::_internal_set_minposition(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  minposition_ = value;
}
inline void ServoTuning::set_minposition(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_minposition(value);
  // @@protoc_insertion_point(field_set:dexhand.ServoTuning.minPosition)
}

// optional uint32 maxPosition = 3;
inline bool ServoTuning::_internal_has_maxposition() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ServoTuning::has_maxposition() const {
  return _internal_has_maxposition();
}
inline void ServoTuning::clear_maxposition() {
  maxposition_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoTuning::_internal_maxposition() const {
  return maxposition_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoTuning::maxposition() const {
  // @@protoc_insertion_point(field_get:dexhand.ServoTuning.maxPosition)
  return _internal_maxposition();
}
inline void ServoTuning::_internal_set_maxposition(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  maxposition_ = value;
}
inline void ServoTuning::set_maxposition(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maxposition(value);
  // @@protoc_insertion_point(field_set:dexhand.ServoTuning.maxPosition)
}

// optional uint32 homePosition = 4;
inline bool ServoTuning::_internal_has_homeposition() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ServoTuning::has_homeposition() const {
  return _internal_has_homeposition();
}
inline void ServoTuning::clear_homeposition() {
  homeposition_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoTuning::_internal_homeposition() const {
  return homeposition_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoTuning::homeposition() const {
  // @@protoc_insertion_point(field_get:dexhand.ServoTuning.homePosition)
  return _internal_homeposition();
}
inline void ServoTuning::_internal_set_homeposition(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  homeposition_ = value;
}
inline void ServoTuning::set_homeposition(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_homeposition(value);
  // @@protoc_insertion_point(field_set:dexhand.ServoTuning.homePosition)
}

// optional uint32 odometer = 5;
inline bool ServoTuning::_internal_has_odometer() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ServoTuning::has_odometer() const {
  return _internal_has_odometer();
}
inline void ServoTuning::clear_odometer() {
  odometer_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoTuning::_internal_odometer() const {
  return odometer_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoTuning::odometer() const {
  // @@protoc_insertion_point(field_get:dexhand.ServoTuning.odometer)
  return _internal_odometer();
}
inline void ServoTuning::_internal_set_odometer(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  odometer_ = value;
}
inline void ServoTuning::set_odometer(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_odometer(value);
  // @@protoc_insertion_point(field_set:dexhand.ServoTuning.odometer)
}

// optional uint32 faults = 6;
inline bool ServoTuning::_internal_has_faults() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ServoTuning::has_faults() const {
  return _internal_has_faults();
}
inline void ServoTuning::clear_faults() {
  faults_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoTuning::_internal_faults() const {
  return faults_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoTuning::faults() const {
  // @@protoc_insertion_point(field_get:dexhand.ServoTuning.faults)
  return _internal_faults();
}
inline void ServoTuning::_internal_set_faults(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  faults_ = value;
}
inline void ServoTuning::set_faults(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_faults(value);
  // @@protoc_insertion_point(field_set:dexhand.ServoTuning.faults)
}

// -------------------------------------------------------------------

// FirmwareSaveFile

// repeated .dexhand.ServoTuning servoTuning = 1;
inline int FirmwareSaveFile::_internal_servotuning_size() const {
  return servotuning_.size();
}
inline int FirmwareSaveFile::servotuning_size() const {
  return _internal_servotuning_size();
}
inline void FirmwareSaveFile::clear_servotuning() {
  servotuning_.Clear();
}
inline ::dexhand::ServoTuning* FirmwareSaveFile::mutable_servotuning(int index) {
  // @@protoc_insertion_point(field_mutable:dexhand.FirmwareSaveFile.servoTuning)
  return servotuning_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dexhand::ServoTuning >*
FirmwareSaveFile::mutable_servotuning() {
  // @@protoc_insertion_point(field_mutable_list:dexhand.FirmwareSaveFile.servoTuning)
  return &servotuning_;
}
inline const ::dexhand::ServoTuning& FirmwareSaveFile::_internal_servotuning(int index) const {
  return servotuning_.Get(index);
}
inline const ::dexhand::ServoTuning& FirmwareSaveFile::servotuning(int index) const {
  // @@protoc_insertion_point(field_get:dexhand.FirmwareSaveFile.servoTuning)
  return _internal_servotuning(index);
}
inline ::dexhand::ServoTuning* FirmwareSaveFile::_internal_add_servotuning() {
  return servotuning_.Add();
}
inline ::dexhand::ServoTuning* FirmwareSaveFile::add_servotuning() {
  // @@protoc_insertion_point(field_add:dexhand.FirmwareSaveFile.servoTuning)
  return _internal_add_servotuning();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dexhand::ServoTuning >&
FirmwareSaveFile::servotuning() const {
  // @@protoc_insertion_point(field_list:dexhand.FirmwareSaveFile.servoTuning)
  return servotuning_;
}

// -------------------------------------------------------------------

// FirmwareVersion

// optional string name = 1;
inline bool FirmwareVersion::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FirmwareVersion::has_name() const {
  return _internal_has_name();
}
inline void FirmwareVersion::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FirmwareVersion::name() const {
  // @@protoc_insertion_point(field_get:dexhand.FirmwareVersion.name)
  return _internal_name();
}
inline void FirmwareVersion::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:dexhand.FirmwareVersion.name)
}
inline std::string* FirmwareVersion::mutable_name() {
  // @@protoc_insertion_point(field_mutable:dexhand.FirmwareVersion.name)
  return _internal_mutable_name();
}
inline const std::string& FirmwareVersion::_internal_name() const {
  return name_.Get();
}
inline void FirmwareVersion::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FirmwareVersion::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dexhand.FirmwareVersion.name)
}
inline void FirmwareVersion::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dexhand.FirmwareVersion.name)
}
inline void FirmwareVersion::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dexhand.FirmwareVersion.name)
}
inline std::string* FirmwareVersion::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FirmwareVersion::release_name() {
  // @@protoc_insertion_point(field_release:dexhand.FirmwareVersion.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FirmwareVersion::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dexhand.FirmwareVersion.name)
}
inline std::string* FirmwareVersion::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dexhand.FirmwareVersion.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FirmwareVersion::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dexhand.FirmwareVersion.name)
}

// optional uint32 major = 2;
inline bool FirmwareVersion::_internal_has_major() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FirmwareVersion::has_major() const {
  return _internal_has_major();
}
inline void FirmwareVersion::clear_major() {
  major_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FirmwareVersion::_internal_major() const {
  return major_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FirmwareVersion::major() const {
  // @@protoc_insertion_point(field_get:dexhand.FirmwareVersion.major)
  return _internal_major();
}
inline void FirmwareVersion::_internal_set_major(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  major_ = value;
}
inline void FirmwareVersion::set_major(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_major(value);
  // @@protoc_insertion_point(field_set:dexhand.FirmwareVersion.major)
}

// optional uint32 minor = 3;
inline bool FirmwareVersion::_internal_has_minor() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FirmwareVersion::has_minor() const {
  return _internal_has_minor();
}
inline void FirmwareVersion::clear_minor() {
  minor_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FirmwareVersion::_internal_minor() const {
  return minor_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FirmwareVersion::minor() const {
  // @@protoc_insertion_point(field_get:dexhand.FirmwareVersion.minor)
  return _internal_minor();
}
inline void FirmwareVersion::_internal_set_minor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  minor_ = value;
}
inline void FirmwareVersion::set_minor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_minor(value);
  // @@protoc_insertion_point(field_set:dexhand.FirmwareVersion.minor)
}

// -------------------------------------------------------------------

// ServoRegister

// optional uint32 servoId = 1;
inline bool ServoRegister::_internal_has_servoid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ServoRegister::has_servoid() const {
  return _internal_has_servoid();
}
inline void ServoRegister::clear_servoid() {
  servoid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoRegister::_internal_servoid() const {
  return servoid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoRegister::servoid() const {
  // @@protoc_insertion_point(field_get:dexhand.ServoRegister.servoId)
  return _internal_servoid();
}
inline void ServoRegister::_internal_set_servoid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  servoid_ = value;
}
inline void ServoRegister::set_servoid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_servoid(value);
  // @@protoc_insertion_point(field_set:dexhand.ServoRegister.servoId)
}

// optional uint32 address = 2;
inline bool ServoRegister::_internal_has_address() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ServoRegister::has_address() const {
  return _internal_has_address();
}
inline void ServoRegister::clear_address() {
  address_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoRegister::_internal_address() const {
  return address_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoRegister::address() const {
  // @@protoc_insertion_point(field_get:dexhand.ServoRegister.address)
  return _internal_address();
}
inline void ServoRegister::_internal_set_address(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  address_ = value;
}
inline void ServoRegister::set_address(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:dexhand.ServoRegister.address)
}

// optional uint32 value = 3;
inline bool ServoRegister::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ServoRegister::has_value() const {
  return _internal_has_value();
}
inline void ServoRegister::clear_value() {
  value_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoRegister::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoRegister::value() const {
  // @@protoc_insertion_point(field_get:dexhand.ServoRegister.value)
  return _internal_value();
}
inline void ServoRegister::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  value_ = value;
}
inline void ServoRegister::set_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:dexhand.ServoRegister.value)
}

// optional uint32 size = 4;
inline bool ServoRegister::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ServoRegister::has_size() const {
  return _internal_has_size();
}
inline void ServoRegister::clear_size() {
  size_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoRegister::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoRegister::size() const {
  // @@protoc_insertion_point(field_get:dexhand.ServoRegister.size)
  return _internal_size();
}
inline void ServoRegister::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  size_ = value;
}
inline void ServoRegister::set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:dexhand.ServoRegister.size)
}

// -------------------------------------------------------------------

// HandParams

// optional bool autoThumbExtensor = 1;
inline bool HandParams::_internal_has_autothumbextensor() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HandParams::has_autothumbextensor() const {
  return _internal_has_autothumbextensor();
}
inline void HandParams::clear_autothumbextensor() {
  autothumbextensor_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool HandParams::_internal_autothumbextensor() const {
  return autothumbextensor_;
}
inline bool HandParams::autothumbextensor() const {
  // @@protoc_insertion_point(field_get:dexhand.HandParams.autoThumbExtensor)
  return _internal_autothumbextensor();
}
inline void HandParams::_internal_set_autothumbextensor(bool value) {
  _has_bits_[0] |= 0x00000001u;
  autothumbextensor_ = value;
}
inline void HandParams::set_autothumbextensor(bool value) {
  _internal_set_autothumbextensor(value);
  // @@protoc_insertion_point(field_set:dexhand.HandParams.autoThumbExtensor)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dexhand

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dexhand_5fmsg_2eproto
